#include <bits/stdc++.h> // Підключаємо всі стандартні бібліотеки
using namespace std;

// Функція для перевірки, чи є число простим
bool is_prime(int x){
    if(x < 2) return false;          // Числа менші за 2 не є простими
    if(x % 2 == 0) return x == 2;    // Якщо парне і не дорівнює 2 → не просте
    int r = sqrt(x);                 // Досить перевіряти дільники до √x
    for(int d = 3; d <= r; d += 2)   // Перевіряємо тільки непарні дільники
        if(x % d == 0) return false; // Якщо ділиться без остачі → не просте
    return true;                     // Інакше число просте
}

int main(){
    ios::sync_with_stdio(false); // Прискорюємо введення/виведення
    cin.tie(nullptr);

    int N;         // Кількість пасажирів на зупинці
    long long A;   // Номер квитка, який отримав Ваня
    if(!(cin >> N >> A)) return 0; // Зчитуємо дані, перевіряємо на помилки

    const int MAXT = 999999; // Максимальний номер квитка в рулоні

    // Якщо пасажирів менше двох (тільки Ваня без Петі), то відповідь -1
    if(N < 2){ 
        cout << -1 << '\n'; 
        return 0; 
    }

    int ans = -1; // Результат (мінімальна кількість пропущених пасажирів)

    // t — це позиція квитка після Ваниного:
    // t = 1 → квиток A+1 (Петя бере одразу після Вані),
    // t = 2 → квиток A+2 (Петя пропустив 1 пасажира), і т.д.
    // Максимум можна дійти до A + (N-1), бо пасажирів усього N.
    for(int t = 1; t <= N-1; ++t){
        long long ticket = A + t;    // Поточний номер квитка
        if(ticket > MAXT) break;     // Якщо номер перевищує 999999 → рулон закінчився
        if(is_prime((int)ticket)){   // Якщо квиток має простий номер
            ans = t - 1;             // t-1 = кількість людей, яких треба пропустити
            break;                   // Беремо найменше можливе t → одразу виходимо
        }
    }

    cout << ans << '\n'; // Виводимо результат
    return 0;
}
